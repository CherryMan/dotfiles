#!/bin/env python3

"""Generate a bar from stdin

This script asynchronously runs each command specified in stdin and
replaces each command with its respective output and outputs it on
every newline.

Commands are specified using the <<cmd>> format. Each must continuously
run and output every few seconds. Commands must flush their buffer.
"""

from subprocess import Popen, PIPE
from threading import Thread

import re
import shlex
import signal
import sys


## Variables

# Standard input
stdin = sys.stdin.read()

# Entire string split by matches
base = re.split(r'(<<[^>]+>>)', stdin)

# List containing only the command names
cmds = re.findall(r'(<<[^>]+>>)', stdin)
for i, v in enumerate(cmds):
    cmds[i] = cmds[i].lstrip("<").rstrip(">")

# Output values from cmds to replace those in base
# Must be same size as cmds to manage ids
replace = cmds[:]

# Popen objects for each cmd
# Must be same size as cmds to manage ids
subproc = cmds[:]

# Replace output of respective commands in the base string
# Both args are lists of strings
# Values from base are replaced from those in rep
def genout(base, rep):

    for i, v in enumerate(rep):
        base[i * 2 + 1] = rep[i].rstrip('\n')

    return ''.join(base)


# Starts a subprocess with cmds[id] as the command.
# Output is flushed to replace[id] and genout is called every newline.
def opensub(id):
    with Popen(shlex.split(cmds[id]), stdout=PIPE, universal_newlines=True) as subproc[id]:
        for line in subproc[id].stdout:
            replace[id] = line
            print(genout(base, replace), flush=True)

def closesub(id):
    subproc[id].terminate()

# Start each command on its own thread
def start():
    for i, v in enumerate(cmds):
        Thread(target=opensub, args=(i,)).start()

# Terminate each process
# *args is ignored
def stop(*args):
    print("Stopping")
    for i, v in enumerate(cmds):
        closesub(i)

if __name__ == '__main__':
    signal.signal(signal.SIGINT, stop)
    signal.signal(signal.SIGTERM, stop)
    signal.signal(signal.SIGPIPE, stop)

    start()
