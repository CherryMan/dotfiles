let skip_defaults_vim=1

" ---- Plug {{{
runtime vim-plug/plug.vim

call plug#begin('~/.vim/plugged')

" themes
Plug 'kaicataldo/material.vim', { 'branch': 'main' }

" interface
Plug 'airblade/vim-gitgutter'
Plug 'easymotion/vim-easymotion'
Plug 'https://gitlab.com/bimlas/vim-high.git'
Plug 'itchyny/lightline.vim'
Plug 'rhysd/git-messenger.vim'

" util
Plug 'scrooloose/nerdtree'
Plug 'embear/vim-localvimrc'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-dispatch'

" edit
Plug 'Raimondi/delimitMate'
Plug 'CherryMan/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'junegunn/vim-easy-align'
Plug 'editorconfig/editorconfig-vim'
Plug 'alvan/vim-closetag'
Plug 'tpope/vim-obsession'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
Plug 'dense-analysis/ale'

Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'yami-beta/asyncomplete-omni.vim'

" lang
Plug 'lervag/vimtex'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'ziglang/zig.vim'
Plug 'sheerun/vim-polyglot'

call plug#end()

" install missing plugins
autocmd VimEnter *
\   if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
\ |     PlugInstall --sync | q
\ | endif

"}}}
" ---- Functions {{{
fun! Preserve(cmd)
    let l:w = winsaveview()
    exec a:cmd
    call winrestview(l:w)
endfun

fun! Format()
    if !&fp | ret | endif
    mkview!

    silent let out = systemlist(&fp, getline(1, '$'))
    if v:shell_error == 0
        silent! exe len(out) . ',' line('$') . 'delete _'
        call setline(1, l:out)
    else
        echo 'Failed to format'
    endif
    silent! loadview
endfun

command! -nargs=0 Format call Format()

command! ToggleSyntax
\   if exists("g:syntax_on")
\ |     syntax off
\ | else
\ |     syntax enable
\ | endif

command! -nargs=1 -complete=dir FilesNoVCS
\   let s:cmd = g:ctrlp_user_command
\ | let b:ctrlp_user_command = g:files_find_no_vcs_cmd
\ | CtrlP <q-args>
\ | let b:ctrlp_user_command = s:cmd

"}}}
" ---- Colours {{{
filetype plugin on
syntax enable

set termguicolors
if !has('nvim')
    " fix for termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

let g:onedark_terminal_italics = 1
let g:palenight_terminal_italics = 1
let g:material_terminal_italics = 1
let g:material_theme_style = 'default'

set background=dark

colorscheme material
let g:lightline_colorscheme = 'material'

"}}}
" ---- Indentation {{{
set tabstop=4     " ts
set softtabstop=4 " sts
set expandtab     " et
set shiftwidth=4  " sw

augroup indent
    au!
    au FileType go          setl noet
    au FileType javascript* setl ts=2 sts=2 sw=2
    au FileType typescript* setl ts=2 sts=2 sw=2
    au FileType html*,css   setl ts=2 sts=2 sw=2
    au FileType scss,less   setl ts=2 sts=2 sw=2
    au FileType asm         setl noet ts=6 sw=6 sts=0
    au FileType make        setl noet ts=8 sw=8 sts=0
    au FileType *tex        setl tw=72 ts=2 sts=2 sw=2
    au FileType context     setl tw=72 ts=2 sts=2 sw=2
    au FileType markdown    setl tw=72
    au FileType pandoc      setl tw=72
    au FileType yaml        setl ts=2 sts=2 sw=2
    au FileType scheme      setl ts=2 sts=2 sw=2
    au FileType dart        setl ts=2 sts=2 sw=2 cino=m1
augroup END

augroup formatter
    au!
    au FileType javascript* setl fex= fp=prettier\ --parser=babel
    au FileType typescript* setl fex= fp=prettier\ --parser=typescript
    au FileType html*       setl fex= fp=tidy\ --tidy-mark\ 0\ -i\ -q\ --show-errors\ 0
    au FileType css         setl fex= fp=prettier\ --parser=css
    au FileType scss        setl fex= fp=prettier\ --parser=scss
    au FileType less        setl fex= fp=prettier\ --parser=less
    au FileType haskell     setl fex= fp=stylish-haskell
    au FileType elixir      setl fex= fp=mix\ format\ -
    au FileType rust        setl fex= fp=rustfmt
    au FileType zig         setl fex= fp=zig\ fmt\ --stdin
    au FileType python      setl fex= fp=black\ --quiet\ -
augroup END

"}}}
" ---- Meta {{{
filetype indent on

set number " line numbers
set cursorline " highlight line under cursor
set laststatus=2 " open statusline
set noshowmode " don't show '--INSERT--'
set noshowmatch " highlight matching bracket
set incsearch " search while typing
set hlsearch " highlight search
set splitbelow " open below instead of above
set mouse=a " mouse movement

if executable('rg')
    set grepprg=rg\ --vimgrep
    set grepformat=%f:%l:%c:%m
endif

set modeline
set nospell
set hidden
set scrolloff=3
set autoread
set completeopt=menuone,noinsert,noselect,preview

set wildignore+=*.o,*.pyc,*.class
set wildignore+=*.pdf
set wildignore+=*.DS_Store

if !empty($XDG_CACHE_HOME)
    if !isdirectory($XDG_CACHE_HOME.'/vim')
        call mkdir($XDG_CACHE_HOME.'/vim', 'p')
    endif
    set directory=$XDG_CACHE_HOME/vim,.,/var/tmp,/tmp,
    set backupdir=$XDG_CACHE_HOME/vim,.,~/

    if !has('nvim')
        set viminfofile=$XDG_CACHE_HOME/vim/viminfo
    endif
endif

"}}}
" ---- Keybinds {{{

let mapleader = "\<Space>"
let maplocalleader = "\\"

imap jk <esc>
nnoremap <C-w>- <C-w>s
nnoremap <C-w>\ <C-w>v

cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <A-f> <S-Right>
cnoremap <A-b> <S-Left>

nmap <Leader>ea <Plug>(EasyAlign)
xmap <Leader>ea <Plug>(EasyAlign)

" not $MYVIMRC because of nvim
nmap <Leader>ce :edit ~/.vimrc<CR>
nmap <Leader>cr :source ~/.vimrc<CR>

nmap <Leader>ff :CtrlP .<CR>
nmap <Leader>fF :FilesNoVCS .<CR>
nmap <Leader>fp :CtrlP<CR>
nmap <Leader>ft :NERDTreeFocus<CR>
nmap <Leader>fc :NERDTreeClose<CR>

map \ <Plug>(easymotion-prefix)

nmap <Leader>th :TagbarToggle<CR>
nmap <Leader>tn :set number!<CR>
nmap <Leader>tr :set relativenumber!<CR>
nmap <Leader>tc :ToggleSyntax<CR>
nmap <Leader>tl <Plug>(ale_toggle)
nmap <Leader>ts :ToggleWorkspace<CR>

nmap <Leader>w <C-w>

nmap <Leader>b :CtrlPBuffer<CR>
nmap <silent> <Leader>[ :1bprevious<CR>
nmap <silent> <Leader>] :1bnext<CR>
nnoremap <BS> <C-^>

nmap <Leader>lo :lopen<CR>
nmap <Leader>lc :lclose<CR>
nmap ]g :lnext<CR>
nmap [g :lprev<CR>

nmap <silent> <Leader>sc :nohlsearch<CR>
nmap <Leader>gq :Format<CR>
nmap <expr> <Leader>= Preserve('norm gg=G')

imap <expr> <C-j> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-j>'
imap <expr> <C-k> vsnip#available(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-k>'
imap <c-space> <Plug>(asyncomplete_force_refresh)
imap <expr> <Tab> pumvisible() ? '<C-n>' : '<Tab>'
imap <expr> <S-Tab> pumvisible() ? '<C-p>' : '<S-Tab>'
imap <expr> <CR>  pumvisible() ? '<C-y>' : '<Plug>delimitMateCR'

nmap <Leader>gm <Plug>(git-messenger)

" abbrevs
augroup abbrevs
    au!
    au FileType c,cpp iab #i #include
augroup END

"}}}
" ---- Plugin Configuration {{{
augroup plugins
    au!
augroup END

" ale
let g:ale_sign_column_always = 0
let g:ale_sign_info = '--'
let g:ale_sign_warning = '*'
let g:ale_sign_style_warning = '>'
let g:ale_sign_error = '>>'
let g:ale_sign_style_error = '>'
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_lint_on_enter = 1
let g:ale_lint_on_filetype_changed = 1
let g:ale_lint_on_save = 1
let g:ale_link_on_text_changed = 'always'
let g:ale_lint_on_insert_leave = 1
let g:ale_enabled = 0
let g:ale_linters = {
\   'c':          ['clangd'],
\   'cpp':        ['clangd'],
\   'rust':       ['rls'],
\   'bash':       ['shellcheck'],
\   'sh':         ['shellcheck'],
\   'elixir':     ['elixir-ls'],
\   'javascript': ['eslint'],
\   'typescript': ['eslint', 'tsserver'],
\}
let g:ale_c_clangtidy_checks = ['']
let g:ale_c_clang_options = '-std=c11 -Wall -Wpedantic'
let g:ale_c_gcc_options = g:ale_c_clang_options
let g:ale_elixir_elixir_ls_release = $HOME . '/.local/src/elixir-ls/release'
let g:ale_java_javalsp_executable = '/usr/bin/java-language-server'

" ctrlp
let g:ctrlp_map = ''
if executable('rg')
    let g:ctrlp_user_command = 'rg %s --files --hidden --color never -g "!.git/*"'
    let g:files_find_no_vcs_cmd = g:ctrlp_user_command . " --no-ignore"
elseif executable('ag')
    let g:ctrlp_user_command = 'ag %s -g "" --hidden --nocolor
                        \ --ignore ".git"'
    let g:files_find_no_vcs_cmd = g:ctrlp_user_command . " --skip-vcs-ignores"
elseif executable('find')
    let g:ctrlp_user_command = 'find %s'
endif

" delimitMate
let g:delimitMate_expand_cr = 1
augroup plugins
    au FileType scheme   let b:delimitMate_quotes = '"'
    au FileType *verilog let b:delimitMate_quotes = '"'
    au FileType matlab   let b:delimitMate_quotes = '"'
    au FileType lisp     let b:delimitMate_quotes = '"'
    au FileType xml,html let b:delimitMate_matchpairs = '(:),[:],{:}'
augroup END

" git-messenger
let g:git_messenger_no_default_mappings = v:true

" haskell-vim
let g:haskell_indent_disable = 0
let g:haskell_indent_if = 4
let g:haskell_indent_case = 4
let g:haskell_indent_let = 4
let g:haskell_indent_where = 4
let g:haskell_indent_before_where = 2
let g:haskell_indent_after_bare_where = 4
let g:haskell_indent_do = 4
let g:haskell_indent_in = 1
let g:haskell_indent_guard = 4

" local-vimrc
let g:localvimrc_name = ['.lvimrc', '_vimrc_local.vim']
let g:localvimrc_sandbox = 0
let g:localvimrc_whitelist = [
\   $HOME . '/proj',
\   $HOME . '/work',
\   $HOME . '/hack',
\   $HOME . '/study',
\]

" lsp
let g:asyncomplete_auto_popup = 0
let g:lsp_diagnostics_enabled = 0
let g:lsp_fold_enabled = 0
let g:asyncomplete_auto_completeopt = 0
au User asyncomplete_setup call asyncomplete#register_source({
\ 'name': 'omni',
\ 'allowlist': ['tex'],
\ 'completor': function('asyncomplete#sources#omni#completor'),
\ 'config': {
\   'show_source_kind': 1
\ },
\ 'refresh_pattern': '\%(\k\|\.\)',
\})

augroup plugins
    au User lsp_buffer_enabled call s:OnLspBufferEnabled()
augroup END

function! s:OnLspBufferEnabled() abort
    setl omnifunc=lsp#complete
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <Plug>(lsp-definition)
    nmap <buffer> <leader>ra <Plug>(lsp-rename)
    nmap <buffer> K <Plug>(lsp-hover)
endfun

" nerdtree
let g:NERDTreeMapHelp = ''
let g:NERDTreeMinimalUI = 1
let g:NERDTreeCaseSensitiveSort = 1
let g:NERDTreeRespectWildIgnore = 1
let g:NERDTreeWinSize = 25

" vim-closetag
let g:closetag_filenames = '*.xml,*.html,*.jsx,*.tsx,*.js'
let g:closetag_regions = {
\ 'typescriptreact': 'jsxRegion,tsxRegion',
\ 'javascriptreact': 'jsxRegion',
\ 'javascript': 'jsxRegion',
\ }

" vim-gitgutter
let g:gitgutter_override_sign_column_highlight = 0

" vim-high
let g:high_lighters = {
\   '_': {
\       'blacklist': ['help', 'qf', 'lf', 'vim-plug'],
\   },
\   'long_line': {},
\ }

" vim-lightline
fun! LightlineLinting()
    return g:ale_enabled ? 'lint' : ''
endfun

fun! LightlineSession()
    return ObsessionStatus('sess', '')
endfun

let g:lightline = {
\   'colorscheme': g:lightline_colorscheme,
\   'active': {
\       'left': [
\           ['mode', 'paste'],
\           ['readonly', 'filename', 'modified'],
\           ['session', 'linting'],
\       ],
\       'right': [
\           ['lineinfo'],
\           ['percent'],
\           ['fileformat', 'fileencoding', 'filetype'],
\       ],
\   },
\   'component_function': {
\       'linting': 'LightlineLinting',
\       'session': 'LightlineSession',
\   }
\ }

" vim-pandoc
let g:pandoc#folding#level = 6
let g:pandoc#folding#fdc = 0

" python-mode
let g:python_highlight_space_errors = 0

" vimtex
let g:tex_flavor = 'latex'

" vim-vsnip
let g:vsnip_snippet_dir = $HOME . '/.vim/snippets'

" zig
let g:zig_fmt_autosave = 0

"}}}

" vim:foldmethod=marker:foldlevel=0
